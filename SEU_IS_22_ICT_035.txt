void readPassword(char *password, int size) {
    int i = 0;
    char ch;
    printf("Enter Admin Password: ");
    fflush(stdout);
#ifdef _WIN32
    while (i < size - 1 && (ch = _getch()) != '\r' && ch != '\n') {
        password[i++] = ch;
        printf("*");
        fflush(stdout);
    }
#else
    struct termios oldt, newt;
    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    while (i < size - 1 && read(STDIN_FILENO, &ch, 1) == 1 && ch != '\n') {
        password[i++] = ch;
        printf("*");
        fflush(stdout);
    }
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
#endif
    password[i] = '\0';
    printf("\n");
}

int checkAdminPassword() {
    char enteredPassword[50];
    readPassword(enteredPassword, sizeof(enteredPassword));
    if (strcmp(enteredPassword, ADMIN_PASSWORD) == 0) {
        printf("Access Granted!\n");
        delay(1000);
        return 1;
    } else {
        printf("Access Denied! Incorrect password.\n");
        delay(1500);
        return 0;
    }
}

void deleteMenuItem() {
    int delId;
    printf("Enter the item code to delete: ");
    scanf("%d", &delId);
    int found = 0;
    for (int i = 0; i < menuCount; i++) {
        if (menu[i].id == delId) {
            found = 1;
            for (int j = i; j < menuCount - 1; j++) {
                menu[j] = menu[j + 1];
            }
            menuCount--;
            printf("Item with code %d deleted successfully.\n", delId);
            delay(1000);
            saveMenuToFile();
            break;
        }
    }
    if (!found) {
        printf("Item code not found.\n");
        delay(1000);
    }
}

void adminPanel() {
    int choice;
    while (1) {
        printf("\n === ADMIN PANEL ===\n");
        delay(500);
        printf("1. Add New Menu Item\n");
        printf("2. Save Menu to File\n");
        printf("3. Delete Menu Item\n");
        printf("4. Exit Admin Panel\n");
        printf("Choice: ");
        scanf("%d", &choice);
        getchar();
        switch (choice) {
            case 1:
                if(menuCount >= MAX_ITEMS) {
                    printf("Menu full! Cannot add more items.\n");
                    delay(1000);
                    return;
                }
                printf("Enter item code (e.g., 101, 205): ");
                scanf("%d", &menu[menuCount].id);
                getchar();
                printf("Enter item name: ");
                fgets(menu[menuCount].name, sizeof(menu[menuCount].name), stdin);
                menu[menuCount].name[strcspn(menu[menuCount].name, "\n")] = '\0';
                printf("Enter price: ");
                scanf("%f", &menu[menuCount].price);
                getchar();
                printf("Enter category (e.g., Drinks, Main Dish, Desserts): ");
                fgets(menu[menuCount].category, sizeof(menu[menuCount].category), stdin);
                menu[menuCount].category[strcspn(menu[menuCount].category, "\n")] = '\0';
                menuCount++;
                printf("Item added successfully!\n");
                delay(1000);
                saveMenuToFile();
                break;
            case 2:
                saveMenuToFile();
                break;
            case 3:
                deleteMenuItem();
                break;
            case 4:
                printf("Exiting Admin Panel.\n");
                delay(1000);
                return;
            default:
                printf("Invalid choice!\n");
                delay(1000);
                break;
        }
    }
}